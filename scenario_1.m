function [allData, scenario, sensors] = scenario_1()
%scenario_1 - Returns sensor detections
%    allData = scenario_1 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_1 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 23.2 (R2023b) and Automated Driving Toolbox 23.2 (R2023b).
% Generated on: 02-Dec-2023 13:42:55

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
        numObjects = length(objectDets);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.0668 0 0.8367], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [3.0668 0], ...
    'Height', 1.96036, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [-0.5668 0], ...
    'Height', 1.96036, ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [2 -1 0.2], ...
    'MountingAngles', [-50 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [1 -1 0.2], ...
    'MountingAngles', [-130 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{6} = drivingRadarDataGenerator('SensorIndex', 6, ...
    'MountingLocation', [2 1 0.2], ...
    'MountingAngles', [50 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{7} = drivingRadarDataGenerator('SensorIndex', 7, ...
    'MountingLocation', [1 1 0.2], ...
    'MountingAngles', [130 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
numSensors = 7;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-50.2 2.6 0;
    27.1 -5.1 0;
    41.15 -1.61 0];
marking4 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')];






marking10 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')];

laneSpecifications = [lanespec(2)
    lanespec(2)
    lanespec(2)
    lanespec(2, 'Marking', marking4)
    lanespec(2)
    lanespec(3)
    lanespec(3)
    lanespec(3)
    lanespec(3)
    lanespec(2, 'Marking', marking10)];
lsConnector = [laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperLength', 6)
    laneSpecConnector('TaperLength', 6)
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('Position', 'Right', 'TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('Position', 'Right', 'TaperLength', 6)];
compLaneSpecification = compositeLaneSpec(laneSpecifications, 'Connector', lsConnector);
road(scenario, roadCenters, 'Lanes', compLaneSpecification, 'Name', 'Road');

roadCenters = [-49.6 -26 0;
    -19.9 -12.9 0;
    7.1 -10.5 0];
marking9 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')];


laneSpecifications = [lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6)
    lanespec(1, 'Width', 6, 'Marking', marking9)
    lanespec(1, 'Width', 6)];
lsConnector = [laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperShape', 'None')
    laneSpecConnector('TaperLength', 4)];
compLaneSpecification = compositeLaneSpec(laneSpecifications, 'Connector', lsConnector);
road(scenario, roadCenters, 'Lanes', compLaneSpecification, 'Name', 'Road1');

roadCenters = [40.66 -1.8 0;
    72.46 9.6 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.848, ...
    'Width', 1.842, ...
    'Height', 1.517, ...
    'Position', [-18.7 -6.2 0], ...
    'RearOverhang', 1.119, ...
    'FrontOverhang', 0.911, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-18.7 -6.2 0;
    -13.2 -7.1 0;
    -6.52 -7.86 0.01;
    10 -8.4 0;
    33.5 -1.4 0;
    43.4 1.3 0;
    70 10.7 0];
speed = [30;30;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.848, ...
    'Width', 1.842, ...
    'Height', 1.517, ...
    'Position', [-23.4 -14.4 0], ...
    'RearOverhang', 1.119, ...
    'FrontOverhang', 0.911, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [-23.4 -14.4 0;
    -13.26 -11.85 0;
    -3.67 -11.62 0.01;
    4.04 -11.85 0;
    17.82 -11.11 0.01;
    35.4 -4.3 0;
    48.7 -0.7 0;
    70.8 6.8 0];
speed = [30;30;30;30;30;30;30;30];
trajectory(car1, waypoints, speed);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 9, ...
    'Width', 3, ...
    'Height', 3.5, ...
    'Position', [-30.5242384945781 -4.30668189271187 0], ...
    'RearOverhang', 2.41, ...
    'FrontOverhang', 1.25, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [-30.5242384945781 -4.30668189271187 0;
    -7.7 -7.8 0;
    11.7 -8.4 0;
    22.5 -6.8 0;
    35.3 -4.4 0;
    70.8 7.1 0];
speed = [25;25;25;25;25;25];
trajectory(truck, waypoints, speed);

truck1 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 9, ...
    'Width', 3, ...
    'Height', 3.5, ...
    'Position', [-6.1 -7.3 0], ...
    'RearOverhang', 2.41, ...
    'FrontOverhang', 1.25, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck1');
waypoints = [-6.1 -7.3 0;
    11.2 -8.4 0;
    26.4 -7 0;
    43.3 -2.9 0;
    69.2 6.3 0];
speed = [30;30;30;30;30];
trajectory(truck1, waypoints, speed);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.848, ...
    'Width', 1.842, ...
    'Height', 1.517, ...
    'Position', [-20.2073391555609 -1.81942596744057 0], ...
    'RearOverhang', 1.119, ...
    'FrontOverhang', 0.911, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [-20.2073391555609 -1.81942596744057 0;
    -13.2 -3.7 0;
    -0.9 -5.3 0;
    9.1 -5.2 0;
    21.44 -3.91 0.01;
    33.28 -1.78 0.01;
    43.22 1.1 0.01;
    71.23 11.21 0.01];
speed = [40;40;40;40;40;40;40;40];
waittime = [0;0;0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

