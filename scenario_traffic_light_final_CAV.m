function [allData, scenario, sensors] = FINAL_referencePathsInfo()
%FINAL_referencePathsInfo - Returns sensor detections
%    allData = FINAL_referencePathsInfo returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = FINAL_referencePathsInfo optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 01-Dec-2023 14:35:55

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.0668 0 0.8367], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [3.0668 0], ...
    'Height', 1.96, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [-0.5668 0], ...
    'Height', 1.96, ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [2 -1 0.2], ...
    'MountingAngles', [-50 0 -50], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [1 -1 0.2], ...
    'MountingAngles', [-135 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{6} = drivingRadarDataGenerator('SensorIndex', 6, ...
    'MountingLocation', [2 1 0.2], ...
    'MountingAngles', [50 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{7} = drivingRadarDataGenerator('SensorIndex', 7, ...
    'MountingLocation', [1 1 0.2], ...
    'MountingAngles', [130 0 0], ...
    'RangeLimits', [0 7.5], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
numSensors = 7;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('StopTime', 18, ...
    'SampleTime', 0.1);

% Add all road segments
roadCenters = [60 0 0;
    -60 0 0];
marking = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(4, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [0 60 0;
    0 -60 0];
marking = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(4, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [8.5 -47.5 0;
    9.8 -23.7 0;
    16.3 -11.2 0;
    28.3 -9 0;
    41.4 -8.7 0;
    59.8 -8.6 0];
laneSpecification = lanespec(1, 'Width', 2.85);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-53.34 -2 0.01], ...
    'FrontOverhang', 0.9, ...
    'Name', 'Car');
waypoints = [-53.34 -2 0.01;
    -44.49 -2 0.01;
    -17.56 -2 0.01;
    -13.2 -2 0.01;
    -10.16 -2 0.01;
    -9.32 -1.96 0.01;
    1.88 9.03 0.01;
    1.9 9.7 0.01;
    1.9 14.76 0.01;
    1.9 23.19 0.01;
    1.9 52 0];
speed = 9;
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-35 -2 0], ...
    'FrontOverhang', 0.9, ...
    'PlotColor', [196 87 14] / 255, ...
    'Name', 'Car1');
waypoints = [-35 -2 0;
    50 -2 0];
speed = [9;9];
waittime = [0;0];
trajectory(car1, waypoints, speed, waittime);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-2 50 0], ...
    'FrontOverhang', 0.9, ...
    'PlotColor', [15 255 255] / 255, ...
    'Name', 'Car2');
waypoints = [-2 50 0;
    -2 10 0;
    -2 2 0;
    -2 1 0;
    -2 -2 0;
    -2 -50 0];
speed = [5;5;3;2.5;3;5];
waittime = [0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [5.86605155684683 -28.8568268351043 0], ...
    'FrontOverhang', 4.4, ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Truck');
waypoints = [5.86605155684683 -28.8568268351043 0;
    5.2 -12.2 0;
    5.1 -2.1 0;
    5.5 10.6 0;
    6 20.4 0;
    6 28 0];
speed = [30;30;30;30;30;30];
trajectory(truck, waypoints, speed);

car = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [23.3 5.6 0], ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Car');
waypoints = [23.3 5.6 0;
    18.6 5.8 0;
    12.6 5.8 0;
    6.7 5.9 0;
    0.1 5.9 0;
    -8.4 5.8 0;
    -17.1 6 0;
    -24.6 6 0;
    -30.7 6 0];
speed = [30;30;30;30;30;30;30;30;30];
trajectory(car, waypoints, speed);

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [5.6 -54.5 0], ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car1');
waypoints = [5.6 -54.5 0;
    5.6 -44.9 0;
    6.8 -39.2 0;
    8.3 -32.8 0;
    10.1 -23 0;
    12.6 -14.5 0;
    16 -11.9 0;
    21.9 -9.9 0;
    27.1 -8.6 0;
    32.3 -8.6 0;
    38 -8.5 0;
    43.6 -8.5 0;
    50.5 -8.5 0;
    59.7 -8.1 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(car1, waypoints, speed);

